AWSTemplateFormatVersion: "2010-09-09"
Description: Full application stack for the Blitzfilter Backend

Parameters:
  Stage:
    Type: String
    Description: "Type of the stage"
    AllowedValues:
      - dev
      - staging
      - prod
  StageName:
    Type: String
    Description: "Unique name of the stage"
  ArtifactBucket:
    Type: String
    Description: "S3 bucket containing Lambda deployment zips"
  CommitSHA:
    Type: String

Mappings:
  ItemWriteQueuesMap:
    MaximumBatchingWindowInSeconds:
      dev: 1
      prod: 10
  ItemMaterializeDynamoDbQueuesMap:
    MaximumBatchingWindowInSeconds:
      dev: 1
      prod: 10
  ItemMaterializeOpenSearchQueuesMap:
    MaximumBatchingWindowInSeconds:
      dev: 1
      prod: 300

Resources:
  TableOne:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "table_1-${StageName}"
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi_1_pk
          AttributeType: S
        - AttributeName: gsi_1_sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: gsi_1
          KeySchema:
            - AttributeName: gsi_1_pk
              KeyType: HASH
            - AttributeName: gsi_1_sk
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - item_id
              - shop_id
              - shops_item_id
              - hash
      BillingMode: PAY_PER_REQUEST
      TableClass: STANDARD
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ItemsOpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: !Sub "application-${StageName}"
      EngineVersion: "OpenSearch_2.19"
      ClusterConfig:
        InstanceType: t3.small.search
        InstanceCount: 1
        ZoneAwarenessEnabled: false
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp3
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "es:*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/application-${StageName}/*"

  DynamoDbEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "dynamodb-event-bus-${StageName}"
  PipeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "dynamodb-to-eventbridge-pipe-role-${StageName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: pipes.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: "*"
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !GetAtt DynamoDbEventBus.Arn
  TableOneStreamToEventBusPipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name: !Sub "tableone-stream-to-eventbus-${StageName}"
      RoleArn: !GetAtt PipeRole.Arn
      Source: !GetAtt TableOne.StreamArn
      SourceParameters:
        DynamoDBStreamParameters:
          StartingPosition: LATEST
          BatchSize: 10
          MaximumBatchingWindowInSeconds: 1
        FilterCriteria:
          Filters:
            - Pattern: |
                {
                  "eventName": ["INSERT"],
                  "dynamodb": {
                    "NewImage": {
                      "sk": {
                        "S": [{ "prefix": "item#event#" }]
                      }
                    }
                  }
                }
      Target: !GetAtt DynamoDbEventBus.Arn
      TargetParameters:
        EventBridgeEventBusParameters:
          DetailType: "DynamoDBStreamRecord"
          Source: !Ref TableOne

  DynamoDbEventBusQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ItemMaterializeDynamoDbNewQ
        - !Ref ItemMaterializeDynamoDbUpdateQ
        - !Ref ItemMaterializeOpenSearchNewQ
        - !Ref ItemMaterializeOpenSearchUpdateQ
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource:
              - !GetAtt ItemMaterializeDynamoDbNewQ.Arn
              - !GetAtt ItemMaterializeDynamoDbUpdateQ.Arn
              - !GetAtt ItemMaterializeOpenSearchNewQ.Arn
              - !GetAtt ItemMaterializeOpenSearchUpdateQ.Arn

  ItemsApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "items-api-${StageName}"
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders:
          - "*"
  ItemsApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Sub "${StageName}"
      ApiId: !Ref ItemsApi
      AutoDeploy: true

  ApiGetItemRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ItemsApi
      RouteKey: "GET /api/v1/items/{shopId}/{shopsItemId}"
      Target: !Sub "integrations/${ItemApiGetItemLambdaIntegration}"
  ItemApiGetItemLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ItemsApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ItemApiGetItemLambda}"
      PayloadFormatVersion: "2.0"
  ItemApiGetItemRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "item-api-get-item-role-${StageName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                Resource: !GetAtt TableOne.Arn
  ItemApiGetItemLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "item-api-get-item-${StageName}"
      Runtime: provided.al2023
      Handler: lib.handler
      Role: !GetAtt ItemApiGetItemRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Sub "item-api-get-item-${StageName}-${CommitSHA}.zip"
      MemorySize: 512
      Timeout: 10
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref TableOne
  ItemApiGetItemLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ItemApiGetItemLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ItemsApi}/*/*/api/v1/items/*/*"

  ApiSimpleSearchRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ItemsApi
      RouteKey: "GET /api/v1/items"
      Target: !Sub "integrations/${ItemApiSimpleSearchLambdaIntegration}"
  ItemApiSimpleSearchLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ItemsApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ItemApiSimpleSearchLambda}"
      PayloadFormatVersion: "2.0"
  ItemApiSimpleSearchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "item-api-simple-search-role-${StageName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: OpenSearchReadOnly
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - es:Describe*
                  - es:List*
                  - es:ESHttpGet
                  - es:ESHttpHead
                  - es:ESHttpPost
                Resource: !Sub "${ItemsOpenSearchDomain.Arn}/*"
  ItemApiSimpleSearchLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "item-api-simple-search-${StageName}"
      Runtime: provided.al2023
      Handler: lib.handler
      Role: !GetAtt ItemApiSimpleSearchRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Sub "item-api-simple-search-${StageName}-${CommitSHA}.zip"
      MemorySize: 512
      Timeout: 10
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          OPENSEARCH_ITEMS_DOMAIN_ENDPOINT_URL: !Sub "https://${ItemsOpenSearchDomain.DomainEndpoint}"
  ItemApiSimpleSearchLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ItemApiSimpleSearchLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ItemsApi}/*/*/api/v1/items*"

  ItemWriteNewDlq:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-write-new-dlq-${StageName}"
      MessageRetentionPeriod: 1209600
  ItemWriteNewQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-write-new-queue-${StageName}"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ItemWriteNewDlq.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 360
  ItemWriteNewRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "item-lambda-write-new-role-${StageName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt TableOne.Arn
        - PolicyName: SQSPollerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource: !GetAtt ItemWriteNewQ.Arn
  ItemWriteNewLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "item-lambda-write-new-${StageName}"
      Runtime: provided.al2023
      Handler: lib.handler
      Role: !GetAtt ItemWriteNewRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Sub "item-lambda-write-new-${StageName}-${CommitSHA}.zip"
      MemorySize: 512
      Timeout: 60
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref TableOne
  ItemWriteNewMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref ItemWriteNewLambda
      EventSourceArn: !GetAtt ItemWriteNewQ.Arn
      Enabled: true
      BatchSize: 200
      MaximumBatchingWindowInSeconds:
        !FindInMap [
          ItemWriteQueuesMap,
          MaximumBatchingWindowInSeconds,
          !Ref Stage,
        ]
      FunctionResponseTypes:
        - ReportBatchItemFailures

  ItemWriteUpdateDlq:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-write-update-dlq-${StageName}"
      MessageRetentionPeriod: 1209600
  ItemWriteUpdateQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-write-update-queue-${StageName}"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ItemWriteUpdateDlq.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 360
  ItemWriteUpdateRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "item-lambda-write-update-role-${StageName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt TableOne.Arn
        - PolicyName: SQSPollerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource: !GetAtt ItemWriteUpdateQ.Arn
  ItemWriteUpdateLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "item-lambda-write-update-${StageName}"
      Runtime: provided.al2023
      Handler: lib.handler
      Role: !GetAtt ItemWriteUpdateRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Sub "item-lambda-write-update-${StageName}-${CommitSHA}.zip"
      MemorySize: 512
      Timeout: 60
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref TableOne
  ItemWriteUpdateMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref ItemWriteUpdateLambda
      EventSourceArn: !GetAtt ItemWriteUpdateQ.Arn
      Enabled: true
      BatchSize: 200
      MaximumBatchingWindowInSeconds:
        !FindInMap [
          ItemWriteQueuesMap,
          MaximumBatchingWindowInSeconds,
          !Ref Stage,
        ]
      FunctionResponseTypes:
        - ReportBatchItemFailures

  ItemMaterializeDynamoDbNewDlq:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-materialize-dynamodb-new-dlq-${StageName}"
      MessageRetentionPeriod: 1209600
  ItemMaterializeDynamoDbNewQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-materialize-dynamodb-new-queue-${StageName}"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ItemMaterializeDynamoDbNewDlq.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 360
  ItemMaterializeDynamoDbNewRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "item-lambda-materialize-dynamodb-new-role-${StageName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt TableOne.Arn
        - PolicyName: SQSPollerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource: !GetAtt ItemMaterializeDynamoDbNewQ.Arn
  ItemMaterializeDynamoDbNewLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "item-lambda-materialize-dynamodb-new-${StageName}"
      Runtime: provided.al2023
      Handler: lib.handler
      Role: !GetAtt ItemMaterializeDynamoDbNewRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Sub "item-lambda-materialize-dynamodb-new-${StageName}-${CommitSHA}.zip"
      MemorySize: 512
      Timeout: 60
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref TableOne
  ItemMaterializeDynamoDbNewMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref ItemMaterializeDynamoDbNewLambda
      EventSourceArn: !GetAtt ItemMaterializeDynamoDbNewQ.Arn
      Enabled: true
      BatchSize: 200
      MaximumBatchingWindowInSeconds:
        !FindInMap [
          ItemMaterializeDynamoDbQueuesMap,
          MaximumBatchingWindowInSeconds,
          !Ref Stage,
        ]
      FunctionResponseTypes:
        - ReportBatchItemFailures

  ItemMaterializeDynamoDbUpdateDlq:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-materialize-dynamodb-update-dlq-${StageName}"
      MessageRetentionPeriod: 1209600
  ItemMaterializeDynamoDbUpdateQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-materialize-dynamodb-update-queue-${StageName}"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ItemMaterializeDynamoDbUpdateDlq.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 360
  ItemMaterializeDynamoDbUpdateRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "item-lambda-materialize-dynamodb-update-role-${StageName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt TableOne.Arn
        - PolicyName: SQSPollerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource: !GetAtt ItemMaterializeDynamoDbUpdateQ.Arn
  ItemMaterializeDynamoDbUpdateLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "item-lambda-materialize-dynamodb-update-${StageName}"
      Runtime: provided.al2023
      Handler: lib.handler
      Role: !GetAtt ItemMaterializeDynamoDbUpdateRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Sub "item-lambda-materialize-dynamodb-update-${StageName}-${CommitSHA}.zip"
      MemorySize: 512
      Timeout: 60
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref TableOne
  ItemMaterializeDynamoDbUpdateMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref ItemMaterializeDynamoDbUpdateLambda
      EventSourceArn: !GetAtt ItemMaterializeDynamoDbUpdateQ.Arn
      Enabled: true
      BatchSize: 200
      MaximumBatchingWindowInSeconds:
        !FindInMap [
          ItemMaterializeDynamoDbQueuesMap,
          MaximumBatchingWindowInSeconds,
          !Ref Stage,
        ]
      FunctionResponseTypes:
        - ReportBatchItemFailures

  ItemMaterializeOpenSearchNewDlq:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-materialize-opensearch-new-dlq-${StageName}"
      MessageRetentionPeriod: 1209600
  ItemMaterializeOpenSearchNewQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-materialize-opensearch-new-queue-${StageName}"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ItemMaterializeOpenSearchNewDlq.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 360
  ItemMaterializeOpenSearchNewRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "item-lambda-materialize-opensearch-new-role-${StageName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: OpenSearchAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - es:*
                Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/application-${StageName}/*"
        - PolicyName: SQSPollerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource: !GetAtt ItemMaterializeOpenSearchNewQ.Arn
  ItemMaterializeOpenSearchNewLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "item-lambda-materialize-opensearch-new-${StageName}"
      Runtime: provided.al2023
      Handler: lib.handler
      Role: !GetAtt ItemMaterializeOpenSearchNewRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Sub "item-lambda-materialize-opensearch-new-${StageName}-${CommitSHA}.zip"
      MemorySize: 512
      Timeout: 60
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          OPENSEARCH_ITEMS_DOMAIN_ENDPOINT_URL: !Sub "https://${ItemsOpenSearchDomain.DomainEndpoint}"
  ItemMaterializeOpenSearchDbNewMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref ItemMaterializeOpenSearchNewLambda
      EventSourceArn: !GetAtt ItemMaterializeOpenSearchNewQ.Arn
      Enabled: true
      BatchSize: 200
      MaximumBatchingWindowInSeconds:
        !FindInMap [
          ItemMaterializeOpenSearchQueuesMap,
          MaximumBatchingWindowInSeconds,
          !Ref Stage,
        ]
      FunctionResponseTypes:
        - ReportBatchItemFailures

  ItemMaterializeOpenSearchUpdateDlq:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-materialize-opensearch-update-dlq-${StageName}"
      MessageRetentionPeriod: 1209600
  ItemMaterializeOpenSearchUpdateQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "item-lambda-materialize-opensearch-update-queue-${StageName}"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ItemMaterializeOpenSearchUpdateDlq.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 360
  ItemMaterializeOpenSearchUpdateRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "item-lambda-materialize-opensearch-update-role-${StageName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: OpenSearchAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - es:*
                Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/application-${StageName}/*"
        - PolicyName: SQSPollerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource: !GetAtt ItemMaterializeOpenSearchUpdateQ.Arn
  ItemMaterializeOpenSearchUpdateLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "item-lambda-materialize-opensearch-update-${StageName}"
      Runtime: provided.al2023
      Handler: lib.handler
      Role: !GetAtt ItemMaterializeOpenSearchUpdateRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Sub "item-lambda-materialize-opensearch-update-${StageName}-${CommitSHA}.zip"
      MemorySize: 512
      Timeout: 60
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          OPENSEARCH_ITEMS_DOMAIN_ENDPOINT_URL: !Sub "https://${ItemsOpenSearchDomain.DomainEndpoint}"
  ItemMaterializeOpenSearchDbUpdateMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref ItemMaterializeOpenSearchUpdateLambda
      EventSourceArn: !GetAtt ItemMaterializeOpenSearchUpdateQ.Arn
      Enabled: true
      BatchSize: 2500
      MaximumBatchingWindowInSeconds:
        !FindInMap [
          ItemMaterializeOpenSearchQueuesMap,
          MaximumBatchingWindowInSeconds,
          !Ref Stage,
        ]
      FunctionResponseTypes:
        - ReportBatchItemFailures

  DynamoDbItemEventRecordCreatedMaterializeDynamoDbItemRecordEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "ddb-item-mat-ddb-new-${StageName}"
      EventBusName: !Ref DynamoDbEventBus
      EventPattern:
        source:
          - !Ref TableOne
        detail-type:
          - "DynamoDBStreamRecord"
        detail:
          eventName:
            - "INSERT"
          dynamodb:
            NewImage:
              event_type:
                S:
                  - "CREATED"
      Targets:
        - Id: ItemMaterializeDynamoDbNewQ
          Arn: !GetAtt ItemMaterializeDynamoDbNewQ.Arn
  DynamoDbItemEventRecordUpdatedMaterializeDynamoDbItemRecordEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "ddb-item-mat-ddb-update-${StageName}"
      EventBusName: !Ref DynamoDbEventBus
      EventPattern:
        source:
          - !Ref TableOne
        detail-type:
          - "DynamoDBStreamRecord"
        detail:
          eventName:
            - "INSERT"
          dynamodb:
            NewImage:
              event_type:
                S:
                  - prefix: "PRICE_"
                  - prefix: "STATE_"
      Targets:
        - Id: ItemMaterializeDynamoDbUpdateQ
          Arn: !GetAtt ItemMaterializeDynamoDbUpdateQ.Arn
  DynamoDbItemEventRecordCreatedMaterializeOpenSearchItemDocumentEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "ddb-item-mat-os-new-${StageName}"
      EventBusName: !Ref DynamoDbEventBus
      EventPattern:
        source:
          - !Ref TableOne
        detail-type:
          - "DynamoDBStreamRecord"
        detail:
          eventName:
            - "INSERT"
          dynamodb:
            NewImage:
              event_type:
                S:
                  - "CREATED"
      Targets:
        - Id: ItemMaterializeOpenSearchNewQ
          Arn: !GetAtt ItemMaterializeOpenSearchNewQ.Arn
  DynamoDbItemEventRecordUpdatedMaterializeOpenSearchItemDocumentEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "ddb-item-mat-os-update-${StageName}"
      EventBusName: !Ref DynamoDbEventBus
      EventPattern:
        source:
          - !Ref TableOne
        detail-type:
          - "DynamoDBStreamRecord"
        detail:
          eventName:
            - "INSERT"
          dynamodb:
            NewImage:
              event_type:
                S:
                  - prefix: "PRICE_"
                  - prefix: "STATE_"
      Targets:
        - Id: ItemMaterializeOpenSearchUpdateQ
          Arn: !GetAtt ItemMaterializeOpenSearchUpdateQ.Arn

Outputs:
  ApiGatewayEndpointUrl:
    Value: !Sub "https://${ItemsApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
  OpensearchItemDomainEndpointUrl:
    Value: !Sub "https://${ItemsOpenSearchDomain.DomainEndpoint}"
  OpensearchDomainName:
    Value: !Ref ItemsOpenSearchDomain
  DynamodbTable1Name:
    Value: !Ref TableOne

  ItemWriteNewQueueUrl:
    Value: !Ref ItemWriteNewQ
  ItemWriteNewDeadLetterQueueUrl:
    Value: !Ref ItemWriteNewDlq

  ItemWriteUpdateQueueUrl:
    Value: !Ref ItemWriteUpdateQ
  ItemWriteUpdateDeadLetterQueueUrl:
    Value: !Ref ItemWriteUpdateDlq

  ItemMaterializeDynamodbNewQueueUrl:
    Value: !Ref ItemMaterializeDynamoDbNewQ
  ItemMaterializeDynamodbNewDeadLetterQueueUrl:
    Value: !Ref ItemMaterializeDynamoDbNewDlq

  ItemMaterializeDynamodbUpdateQueueUrl:
    Value: !Ref ItemMaterializeDynamoDbUpdateQ
  ItemMaterializeDynamodbUpdateDeadLetterQueueUrl:
    Value: !Ref ItemMaterializeDynamoDbUpdateDlq

  ItemMaterializeOpensearchNewQueueUrl:
    Value: !Ref ItemMaterializeOpenSearchNewQ
  ItemMaterializeOpensearchNewDeadLetterQueueUrl:
    Value: !Ref ItemMaterializeOpenSearchNewDlq

  ItemMaterializeOpensearchUpdateQueueUrl:
    Value: !Ref ItemMaterializeOpenSearchUpdateQ
  ItemMaterializeOpensearchUpdateDeadLetterQueueUrl:
    Value: !Ref ItemMaterializeOpenSearchUpdateDlq
