name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint Workspace
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy lint
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  build:
    name: Build ${{ matrix.crate }}
    needs: lint
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate:
          - src/common
          - src/item/src/item-api/src/item-api-get-item
          - src/item/src/item-core
          - src/item/src/item-data
          - src/item/src/item-dynamodb
          - src/item/src/item-opensearch
          - src/item/src/item-lambda/src/item-lambda-materialize-dynamodb-new
          - src/item/src/item-lambda/src/item-lambda-materialize-dynamodb-update
          - src/item/src/item-lambda/src/item-lambda-materialize-opensearch-new
          - src/item/src/item-lambda/src/item-lambda-materialize-opensearch-update
          - src/item/src/item-lambda/src/item-lambda-write-new
          - src/item/src/item-lambda/src/item-lambda-write-update
          - src/item/src/item-service
          - src/scrape/src/scrape-core
          - src/scrape/src/scrape-static
          - src/test-api
    steps:
      - uses: actions/checkout@v5

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build ${{ matrix.crate }}
        working-directory: ${{ matrix.crate }}
        run: cargo build --all-features

  unit-test:
    name: Unit-Test ${{ matrix.crate }}
    needs: build
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate:
          - src/common
          - src/item/src/item-api/src/item-api-get-item
          - src/item/src/item-core
          - src/item/src/item-data
          - src/item/src/item-dynamodb
          - src/item/src/item-opensearch
          - src/item/src/item-lambda/src/item-lambda-materialize-dynamodb-new
          - src/item/src/item-lambda/src/item-lambda-materialize-dynamodb-update
          - src/item/src/item-lambda/src/item-lambda-materialize-opensearch-new
          - src/item/src/item-lambda/src/item-lambda-materialize-opensearch-update
          - src/item/src/item-lambda/src/item-lambda-write-new
          - src/item/src/item-lambda/src/item-lambda-write-update
          - src/item/src/item-service
          - src/scrape/src/scrape-core
          - src/scrape/src/scrape-static
          - src/test-api
    steps:
      - uses: actions/checkout@v5

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Test ${{ matrix.crate }}
        working-directory: ${{ matrix.crate }}
        run: cargo test --lib --all-features

  integration-test:
    name: Integration-Test ${{ matrix.crate }}
    needs: build
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate:
          - src/item/src/item-dynamodb
          - src/item/src/item-opensearch
          - src/item/src/item-lambda/src/item-lambda-materialize-dynamodb-new
          - src/item/src/item-lambda/src/item-lambda-materialize-dynamodb-update
          - src/item/src/item-lambda/src/item-lambda-materialize-opensearch-new
          - src/scrape/src/scrape-core
          - src/test-api
    steps:
      - uses: actions/checkout@v5

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Zig via npm
        run: |
          npm install -g @ziglang/cli

      - name: Install cargo-lambda
        run: |
          if ! command -v cargo-lambda &> /dev/null; then
            cargo install cargo-lambda
          fi

      - name: Test ${{ matrix.crate }}
        working-directory: ${{ matrix.crate }}
        run: cargo test --test '*' --all-features

  sonar:
    name: SonarQube-Cloud Analysis
    needs: [unit-test, integration-test]
    if: github.actor != 'dependabot[bot]'
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt, llvm-tools

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Zig via npm
        run: |
          npm install -g @ziglang/cli

      - name: Install cargo-lambda
        run: |
          if ! command -v cargo-lambda &> /dev/null; then
            cargo install cargo-lambda
          fi

      - name: Install grcov
        run: cargo install grcov

      - name: Generate coverage
        env:
          RUSTFLAGS: "-C instrument-coverage"
          LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
        run: |
          cargo test --workspace --all-features
          grcov . --binary-path ./target/debug/deps/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" --ignore "*/target/*" --ignore "*/.cargo/*" -o coverage.lcov

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
