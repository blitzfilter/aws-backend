name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint Workspace
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy lint
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  build:
    name: Build ${{ matrix.crate }}
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate:
          - src/common
          - src/filter
          - src/item/src/item-core
          - src/item/src/item-index
          - src/item/src/item-write
          - src/item/src/item-read
          - src/test-api
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build ${{ matrix.crate }}
        working-directory: ${{ matrix.crate }}
        run: cargo build --all-features

  test:
    name: Test ${{ matrix.crate }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate:
          - src/common
          - src/filter
          - src/item/src/item-core
          - src/item/src/item-index
          - src/item/src/item-write
          - src/item/src/item-read
          - src/test-api
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Test ${{ matrix.crate }}
        working-directory: ${{ matrix.crate }}
        run: cargo test --all-features

  sonar:
    name: SonarQube-Cloud Analysis
#    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt, llvm-tools

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Run Clippy and generate JSON report
        run: |
          cargo clippy --workspace --all-targets --all-features --message-format=json > clippy-report.json

      - name: Generate coverage report
        run: cargo llvm-cov --all-features --workspace --lcov --output-path coverage.lcov

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.externalIssuesReportPaths=clippy-report.json
            -Dsonar.rust.clippy.reportPaths=clippy-report.json
            -Dsonar.coverageReportPaths=coverage.lcov